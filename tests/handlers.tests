Identity handler
{fun identity(m) { handle(m()) { case Return(x) -> x } } identity(fun() { 42 }) }
stdout : 42 : Int
flags : --enable-handlers -e

Listify handler (fortytwo)
{fun listify(m) { handle(m()) { case Return(x) -> [x] } } listify(fun() { 42 }) }
stdout : [42] : [Int]
flags : --enable-handlers -e

Listify handler (list)
{fun listify(m) { handle(m()) { case Return(x) -> [x] } } listify(fun() { [42, 41, 40, 39] }) }
stdout : [[42, 41, 40, 39]] : [[Int]]
flags : --enable-handlers -e

Maybe handler (Nothing)
{fun maybe(m) { handle(m()) { case Fail(_) -> Nothing case Return(x) -> Just(x) } } maybe(fun() { do Fail; 42 }) }
stdout : Nothing : [|Just:Int|Nothing|_|]
flags : --enable-handlers -e

Maybe handler (Just(42))
{fun maybe(m) { handle(m()) { case Fail(_) -> Nothing case Return(x) -> Just(x) } } maybe(fun() { 42 }) }
stdout : Just(42) : [|Just:Int|Nothing|_|]
flags : --enable-handlers -e

Recover handler
{fun recover(m) { handle(m()) { case Fail(_,k) -> k(()) case Return(x) -> x } } recover(fun() { var x = "Yikes!"; do Fail(()); var x = "Phew! Thanks!"; x }) }
stdout : "Phew! Thanks!" : String
flags : --enable-handlers -e

Choice handler
{fun choice(m) { handle(m()) { case Choose(_,k) -> k(true) ++ k(false) case Return(x) -> [x] } } choice(fun() { var x = if (do Choose(())) { 40 } else { 20 }; var y = if (do Choose(())) { 2 } else { -20 }; x + y }) }
stdout : [42, 20, 22, 0] : [Int]
flags : --enable-handlers -e

Soundness (1)
{fun mapk(m) { handle(m()) { case Map(p,k) -> map(k,p) case Return(x) -> [x] } } }
stderr : @.
exit : 1
flags : --enable-handlers -e

Soundness (2)
{ handler escapeViaJust(m) { case Escape(p,k) -> Just(k) case Return(x)   -> Just(x) }  fun comp() { do Escape(); "What is the type of the continuation now?" } escapeViaJust(comp) }
stderr : @.
exit : 1
flags : --enable-handlers -e

State handler
{fun state(m) { handle(m()) { case Get(p,k) -> fun(s) { k(s)(s) } case Put(p,k) -> fun(s) { k(())(p) } case Return(x) -> fun(s) { x } } } fun runState(s0, c) { var f = state(c); f(s0) } runState(2, fun() { var s = do Get(()); do Put(s + 1); var s = do Get(()); do Put(s + s); do Get(()) }) }
stdout : 6 : Int
flags : --enable-handlers -e

Cannot discharge operation toplevel
{ do Get }
stderr : @.
exit : 1
flags : --enable-handlers -e

Cannot discharge Return
{ fun() { do Return(1) } }
stderr : @.
exit : 1
flags : --enable-handlers -e

Shadowing handler parameter (1)
{ handler state(s) { case Get(k) -> k(s)(s) case Put(s,k) -> k(())(s) case Return(x) -> x } fun comp() { var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get } state(0)(comp)()  }
stdout : 2 : Int
flags : --enable-handlers -e

Shadowing handler parameter (2)
{ handler state(s) { case Get(k) -> k(s)(s) case Put(p as s,k) -> k(())(s) case Return(x) -> x } fun comp() { var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get } state(0)(comp)()  }
stdout : 2 : Int
flags : --enable-handlers -e

Shadowing handler parameter (3)
{ handler state(s) { case Get(k) -> k(s)(s) case Put(s as p,k) -> k(())(s) case Return(x) -> x } fun comp() { var s = do Get; do Put(s + 1); var s = do Get; do Put(s + s); do Get } state(0)(comp)()  }
stdout : 2 : Int
flags : --enable-handlers -e

Signature for handler (deep, open handler)
sig h1 : (Comp({Op:(Int) {}-> Int|e}, Int)) -> Comp({Op{_}|e}, Int) handler h1 { case Op(p,k) -> k(p+1) case Return(x) -> 2 }
stdout : () : ()
flags : --enable-handlers -e

Signature for handler (shallow, open handler)
sig h1 : (Comp({Op:(Int) {}-> Int|e},Int)) -> Comp({Op{_}|e}, Int) shallowhandler h1 { case Op(p,k) -> h1(fun() {k(p+1)})() case Return(x) -> 2 }
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (hiding)
handler h1 { case Op1(_) -> 1 case Op2(_,k) -> 2 case Op3(_,_) -> 3 case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (aliasing)
handler h1 { case Op1(p as q,k) -> k(q) case Op2(s,t as w,k) -> k(t) case Op3(a,b,c as d,_) -> d case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (Int)
handler h1 { case Op1(1,k) -> k(1) case Op2(s,2,k) -> k(s) case Op3(a,b,3,_) -> 3 case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (Float)
handler h1 { case Op1(1.0,k) -> k(1.0) case Op2(s,2.0,k) -> k(s) case Op3(a,b,3.0,_) -> 3.0 case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (Variant tag)
handler h1 { case Op1(Alice,k) -> k(1) case Op2(s,Bob,k) -> k(s) case Op3(a,b,Jenny,_) -> a case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Operation parameter pattern-matching (Records)
handler h1 { case Op1((_,y),k) -> k(y) case Op2((x,y,z),k) -> k(z) case Op3(_,(a,b,c),_) -> a case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Pattern-matching on continuation parameter (hiding)
handler h1 { case Op(_) -> 0 case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Pattern-matching on continuation parameter (aliasing)
handler h1 { case Op(k as f) -> f(1) case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Pattern-matching on continuation parameter (Constant)
handler h1 { case Op(2) -> f(1) case Return(x) -> x }
stderr : @.
exit : 1
flags : --enable-handlers -e

Return parameter pattern-matching (hiding)
handler h1 { case Op1(k) -> 1 case Return(_) -> 0 }
stdout : () : ()
flags : --enable-handlers -e

Return parameter pattern-matching (aliasing)
handler h1 { case Op1(k) -> 1 case Return(x as y) -> y }
stdout : () : ()
flags : --enable-handlers -e

Return parameter pattern-matching (Int)
handler h1 { case Op1(k) -> 1 case Return(10) -> 10 }
stdout : () : ()
flags : --enable-handlers -e

Return parameter pattern-matching (Float)
handler h1 { case Op1(k) -> 1 case Return(100.0) -> 0 }
stdout : () : ()
flags : --enable-handlers -e

Return parameter pattern-matching (Variant tag)
handler h1 { case Op1(k) -> 1 case Return(Alice) -> 0 }
stdout : () : ()
flags : --enable-handlers -e

Return parameter pattern-matching (Pair)
handler h1 { case Op1(k) -> 1 case Return((x,y)) -> 0 }
stdout : () : ()
flags : --enable-handlers -e

Open handler composition (1)
handler h1 { case Op1(k) -> k(1) case Return(x) -> x } handler h2 { case Op2(k) -> k(2) case Return(x) -> x } handler h3 { case Op3(k) -> k(3) case Return(x) -> x } h1(h2(h3(fun() { do Op1 + do Op2 + do Op3 })))()
stdout : 6 : Int
flags : --enable-handlers -e

Type annotation on continuation parameter (deep, open handler)
handler h1 { case Op(k : ((Int) {Op{_}|_}~> Int)) -> k(1) case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Type annotation on continuation parameter (shallow, open shallowhandler)
shallowhandler h1 { case Op(k : ((Int) {Op:Int|_}~> Int)) -> h1(fun() { k(1) })() case Return(x) -> x }
stdout : () : ()
flags : --enable-handlers -e

Shallow handler (Addition, one handler)
{ shallowhandler h1 { case One(k) -> h1(fun() { k(1) })() case Return(x) -> x - 1} h1(fun() { do One + do One })() }
stdout : 1 : Int
flags : --enable-handlers -e

Shallow handlers (Addition, two handlers)
{ shallowhandler h1 { case One(k) -> h1(fun() { k(1) })() case Return(x) -> x} shallowhandler h2 { case One(k) -> h1(fun() { k(2) })() case Return(x) -> x} h2(fun() { do One + do One })() }
stdout : 3 : Int
flags : --enable-handlers -e
ignore : Issue #32

Open shallow handler composition
{ shallowhandler h1 { case Op1(k) -> h1(fun() { k(1) })() case Return(x) -> x } shallowhandler h2 { case Op2(k) -> h2(fun() { k(2) })() case Return(x) -> x } h1(h2(fun() { do Op1 + do Op2 }))() }
stdout : 3 : Int
flags : --enable-handlers -e

Simple shallow state
{ shallowhandler simpleState(s) { case Get(k) -> simpleState(s)(fun() { k(s) })() case Put(s,k) -> simpleState(s)(fun() { k(()) })() case Return(x) -> x } fun count() { var n = do Get; if (n == 0) {n} else {do Put(n-1); count() }} simpleState(10)(count)() }
stdout : 0 : Int
flags : --enable-handlers -e

Parameterised handlers (anonymous parameters) [1]
{ handler(_ : Int)(_ : Float)(_ : String) { case Op(p,k) -> k(p)(42)(3.14)("Foo") case Return(x) -> x } }
stdout : fun : (Int) -> (Float) -> (String) -> (() {Op:(d) {}-> d|e}~> f) -> () {Op{_}|e}~> f
flags : --enable-handlers -e

Parameterised handlers (anonymous parameters) [2]
{ handler(_ : Float,_ : String,_ : Int) { case Op(p,k) -> k(p)(3.14,"Bar",99) case Return(x) -> x } }
stdout : fun : (Float, String, Int) -> (() {Op:(b) {}-> b|c}~> d) -> () {Op{_}|c}~> d
flags : --enable-handlers -e

Instantiate.ArityMismatch #132 (RESOLVED)
sig f : (() {Foo:Int|a}~> b) {Foo{_}|a}~> b fun f(m) { error("N/A") } fun g(m) { var x = f(m); x }
stdout : () : ()
flags : --enable-handlers -e

Operation polymorphism
sig catch : (() {Fail:forall a.a |e}~> b) {Fail{_} |e}~> Maybe(b) fun catch(m) { handle(m()) { case Fail(k) -> Nothing case Return(x) -> Just(x) } } catch(fun() { 42 })
stdout : Just(42) : Maybe (Int)
flags : --enable-handlers -e
