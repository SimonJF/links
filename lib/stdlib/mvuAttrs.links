open MvuEvents;

# Type definitions
## Attributes
typename AttrKey = String;
typename AttrValue = String;

# Monoidal attributes (including event handlers)
typename Attr(a :: Type(Any, Any)) =
  [| AttrEmpty
   | AttrAppend: (Attr(a), Attr(a))
   | AttrAttribute: (AttrKey AttrValue)
   | AttrEventHandler: EventHandler(a) |];

fun attr(k, v) {
  AttrAttribute(k, v)
}

fun evtHandler(hndlr) {
  AttrEventHandler(hndlr)
}

fun append(a1, a2) {
  AttrAppend(a1, a2)
}

fun concat(attrs) {
  fold_right(fun(x, acc) { x :: acc }, [], attrs)
}

fun placeholder(val) {
    attr ("placeholder", val)
}

fun id(val) {
    attr ("id", val)
}

fun type(val) {
    attr ("type", val)
}

fun width(val) {
    attr ("width", val)
}

fun height(val) {
    attr ("height", val)
}

fun style(val) {
    attr ("style", val)
}

fun class (val) {
	attr ("className", val)
}

fun color(val) {
    attr ("color", val)
}

fun title(val) {
	attr ("title", val)
}

fun href(val) {
	attr ("href", val)
}

fun dir(val) {
	attr ("dir", val)
}

fun lang(val) {
	attr ("lang", val)
}

fun face(val) {
	attr ("face", val)
}

fun name(val) {
    attr ("name", val)
}

fun value(val) {
    attr ("value", val)
}

fun for_(val) {
    attr ("for", val)
}

fun text(val) {
    attr ("text", val)
}

fun href(val) {
    attr ("href", val)
}

fun autofocus(val) {
  if (val) {
    attr ("autofocus", "true")
  } else {
    AttrEmpty
  }
}

sig checked : (Bool) -> (String,String)
fun checked(val) {
    if (val) {
      attr ("checked", "true")
    } else {
      AttrEmpty
    }
}

sig hidden : (Bool) -> (String,String)
fun hidden(val) {
    if (val == true) {
      attr("hidden", "true")
    } else {
      AttrEmpty
    }
}

fun classList(classes) {
    switch (classes) {
        case ((val,b)::xs) ->
            if (b == true) {
                val ^^ " " ^^ classList(xs)
            } else {
                classList(xs)
            }
        case [] -> ""
    }
}
