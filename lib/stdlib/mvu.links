### VDOM STUFF ###
open import MvuAttrs;
open import MvuEvents;
open import MvuHTML;
open import MvuSubscriptions;
open import MvuCommands;

# Needed to ensure that virtual-dom is open
module VirtualDom {
  alien javascript "/lib/virtual-dom.js" {
    dummy : ();
  }
}

# Loads the "vdom.js" file, exposes runDom and updateDom.
module VDom {
  alien javascript "/lib/vdom.js" {
    runDom : forall a :: Type(Any, Any) .
      (String, HTML(a), AP(?a.End), Sub(a)) ~> ();
    updateDom : forall a :: Type(Any, Any) . (HTML(a), Sub(a)) ~> ();
    transition : forall a :: Type(Any, Any) . (AP(?a.End), HTML(a), Sub(a)) ~> ();
  }
}

typename Transition(model :: Type(Any, Any), msg :: Type(Any, Any)) =
  forall
    newMsg :: Type(Any, Any),
    newModel :: Type(Any, Any),
    newUnrModel :: Type(Unl, Any),
    newEff :: Eff.

    [| NoTransition:(model, Command(msg))
     | Transition:
         (newModel,
         (newUnrModel) ~newEff~> HTML(newMsg),
         (newMsg, newModel) ~newEff~> Transition(newModel, newMsg),
         (newUnrModel) ~newEff~> Sub(newMsg),
         (newModel) ~newEff~> (newModel, newUnrModel),
         Command(newMsg))
     |];


# Main event loop
sig evtLoop :
 forall msg :: Type(Any, Any),
        model :: Type(Any, Any),
        unrModel :: Type(Unl, Any) .
  (AP(?msg.End),
   model,
   (unrModel) ~e~> HTML(msg),
   (msg, model) ~e~> Transition(model, msg),
   (unrModel) ~e~> Sub(msg),
   (model) ~e~> (model, unrModel),
   Sub(msg)) ~e~> ()
fun evtLoop(ap, model, view, updt, subscriptionsFn, extract, prevSubscriptions) {
  var (message, s) = receive(accept(ap));
  close(s);
  var updtRes = updt(message, model);
  switch(updtRes) {
    case NoTransition(model, cmd) ->
      processCommand(cmd, ap);
      # Extract unrestricted model
      var (model, unrModel) = extract(model);
      # Get new subscriptions
      var newSubscriptions = subscriptionsFn(unrModel);
      # Update DOM
      VDom.updateDom(view(unrModel), newSubscriptions);
      evtLoop(ap, model, view, updt, subscriptionsFn, extract, newSubscriptions)
    case Transition(model, view, updt, sub, extract, cmd) ->
      ignore(spawn {
        # Create new AP used for next message type
        var ap = new();
        processCommand(cmd, ap);
        # Extract unrestricted model
        var (model, unrModel) = extract(model);
        # Get new subscriptions
        var newSubscriptions = subscriptionsFn(unrModel);
        # FFI call
        VDom.transition(ap, view(unrModel), newSubscriptions);
        evtLoop(ap, model, view, updt, sub, extract, newSubscriptions)
      })
  }
}

sig runLinear:
  forall
  msg::Type(Any, Any), model::Type(Any, Any),
    unrModel::Type(Unl, Any) .
  (String,
   model,
   (unrModel) ~e~> HTML(msg),
   (msg, model) ~e~> Transition(model, msg),
   (unrModel) ~e~> Sub(msg),
   (model) ~e~> (model, unrModel)
   ) ~f~> ()
fun runLinear(placeholder, model, view, updt, subscriptions, extract) {
  var evtHandler = spawnClient {
    var (model, unrModel) = extract(model);
    var ap = new();
    VDom.runDom(placeholder, view(unrModel), ap, subscriptions(unrModel));
    evtLoop(ap, model, view, updt, subscriptions, extract, subscriptions(unrModel))
  };
  ()
}

# User-facing function (assuming an unrestricted model)
sig run:
  forall
    msg :: Type(Any, Any),
    model :: Type(Unl, Any) .
  (String,
    model,
    (model) ~e~> HTML(msg),
    (msg, model) ~e~> (model, Command(msg)),
    (model) ~e~> Sub(msg)) ~f~> ()
fun run(placeholder, model, view, updt, subscriptions) {
  fun wrapUpdt(msg, model) {
    var (model, cmd) = updt(msg, model);
    NoTransition(model, cmd)
  }
  runLinear(placeholder, model, view, wrapUpdt, subscriptions, fun(x) { (x, x) })
}

sig runSimple :
  forall
    msg :: Type(Any, Any),
    model :: Type(Unl, Any) .
  (String,
    model,
    (model) ~e~> HTML(msg),
    (msg, model) ~e~> model) ~f~> ()
fun runSimple(placeholder, model, view, updt) {
  run(placeholder, model, view,
    fun(msg, model) { (updt(msg, model), NoCommand)},
    fun(_) { SubEmpty } )
}

sig runStatic :
  forall
    model :: Type(Unl, Any) .
  (String, model, (model) ~e~> HTML(())) ~f~> ()
fun runStatic(placeholder, model, view) {
  runSimple(placeholder, model, view, fun(_, model) { model })
}
