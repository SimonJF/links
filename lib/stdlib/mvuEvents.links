# MVU Event handlers, used by both attributes and subscriptions

## Properties of DOM elements
typename PropertyName = String;
typename PropertyValue = String;

## Properties of event objects
typename EventName = String;
typename EventKey = String;
typename EventValue = String;


# Event handler attributes
typename EventHandler(a :: Type(Any, Any)) =
  [| PropertyHandler:
      (EventName, PropertyName, (PropertyValue) {}~> Maybe(a))
   | EventDataHandler:
      (EventName, EventKey, (EventValue) {}~> Maybe(a))
   | UnitHandler: (EventName, () {}~> a)
   | TupleIntHandler: (EventName, ((Int,Int)) {}~> a)
   | TimeHandler: (Int, () {}~> a)
   | AnimationFrameHandler: ((a) {}~> a) |];

### MOUSE HELPERS ###

fun onClick(f) {
  eventHandler(UnitHandler("onclick", f))
}

fun onClick(f) {
  eventHandler(UnitHandler("onchange", f))
}

fun onMouseMove(f) {
  eventHandler(UnitHandler("onmousemove", f))
}
fun onMouseDown(f) {
  eventHandler(UnitHandler("onmousedown", f))
}
fun onMouseUp(f) {
  eventHandler(UnitHandler("onmouseup", f))
}
fun onMouseEnter(f) {
  eventHandler(UnitHandler("onmouseenter", f))
}
fun onMouseLeave(f) {
  eventHandler(UnitHandler("onmouseleave", f))
}
fun onClick(f) {
  eventHandler(UnitHandler("onclick", f))
}
fun onDoubleClick(f) {
  eventHandler(UnitHandler("ondblclick", f))
}
fun onMouseOver(f) {
  eventHandler(UnitHandler("onmouseover", f))
}
fun onMouseOut(f) {
  eventHandler(UnitHandler("onmouseout", f))
}

### FOCUS HELPERS ###

fun onFocus(f) {
  eventHandler(UnitHandler("onfocus", f))
}

fun onBlur(f) {
  eventHandler(UnitHandler("onblur", f))
}

### KEYBOARD HELPERS ###

fun onKeyUp(f) {
  eventHandler(UnitHandler("onkeyup", "value", fun(val) { Just(f(val)) } ))
}
fun onKeyDown(f) {
  eventHandler(UnitHandler("onkeydown", "value", fun(val) { Just(f(val)) }))
}
fun onKeyPress(f) {
  eventHandler(UnitHandler("onkeypress", "value", fun(val) { Just(f(val)) }))
}
fun onInput(f) {
  eventHandler(UnitHandler("oninput", "value", fun(val) { Just(f(val)) }))
}

fun getKeycode(event, f) {
  eventHandler(EventDataHandler(event, "keyCode", fun(val) { Just(f(val)) } ))
}

fun onKeycode(event, keycode, f) {
  eventHandler(
    EventDataHandler(event, "keyCode",
      fun(kc) {
        if(keycode == stringToInt(kc)) {
          Just(f())
        } else {
          Nothing
        }
      }
    )
  )
}

fun onEnter(f) { onKeycode("onkeydown", 13, f) }


