open MvuEvents;

typename Sub(a :: Type(Any, Any)) =
  [| SubEmpty
   | SubAppend: (Sub(a), Sub(a))
   | SubEventHandler: EventHandler(a) # Subscribe to a window event
   | SubInterval: (Int, () {}~> a))   # Timing interval
   | SubAnimationFrame: (Int) {}~> a  # Animation frame (int is timestamp)
   |];

fun append(s1, s2) {
  switch((s1, s2)) {
    case (SubEmpty, s2) -> s2
    case (s1, SubAppend) -> s1
    case (s1, s2) -> SubAppend(s1, s2)
  }
}

op s1 +~ s2 { append(s1, s2) }

fun concat(nodes) {
  fold_right(fun(x, acc) { append(x, acc) }, SubEmpty, nodes)
}


### TODO: GO FROM HERE.
## Need to update HandlerSub to new interface.
fun getKeyDownCode(f) {
  var hdler = EventDataHandler("keydown", "keyCode", fun(v) { Just(f(v)) });
  HandlerSub(uniqueID(hdler), hdler)
}

fun getKeyUpCode(f) {
  var hdler = EventDataHandler("keyup", "keyCode", fun(v) { Just(f(v)) });
  HandlerSub(uniqueID(hdler), hdler)
}

fun getKeyPressCode(f) {
  var hdler = EventDataHandler("keypress", "keyCode", fun(v) { Just(f(v)) });
  HandlerSub(uniqueID(hdler), hdler)
}

fun getMousePos(f) {
  var hdler = TupleIntHandler("mousemove", f);
  HandlerSub(uniqueID(hdler), hdler)
}

fun getEvery(interval, f) {
  var hdler = TimeHandler(interval, f);
  HandlerSub(uniqueID(hdler), hdler)
}

fun animationFrame(f) {
  var hdler = UnitHandler("animationFrame", f);
  HandlerSub(uniqueID(hdler), hdler)
}


