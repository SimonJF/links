open Mvu;
open MvuHTML;
open MvuAttrs;
open MvuEvents;
open MvuSubscriptions;

typename Model = (coords: (Int,Int));
typename Msg = [| MouseCoords : (Int,Int) |];

fun mouseMoveHandler() {
  getMousePos(fun(newCoords) { MouseCoords(newCoords) })
}

sig updt : (Msg, Model) ~%e~> Model
fun updt(msg, model) {
  switch(msg) {
    case MouseCoords(newCoords) ->
      (model with coords = newCoords)
  }
}

fun getRGB(xPos, yPos) {
  # 1300 , 600
  var red = xPos * (1300/255);
  var green = yPos * (600/255);
  var blue = (xPos+yPos) * (1900/255);
  intToString(red) ^^ "," ^^ intToString(green) ^^ "," ^^ intToString(blue)
}

var ae = MvuAttrs.empty;

sig view : (Model) ~%e~> HTML(Msg)
fun view(model) {
  var xPos = first(model.coords);
  var yPos = second(model.coords);
  var styleStr =
    "width:100%; height:100%; background-color:rgb(" ^^
      getRGB(xPos, yPos) ^^ ")";
  div (style(styleStr),
    h4 (ae, textNode(intToString(xPos) ^^ ", " ^^ intToString(yPos))))
}

sig subscriptions : (Model) -> Sub(Msg)
fun subscriptions(model) {
  mouseMoveHandler()
}


fun mainPage(_) {
  var initialModel = (coords = (0,0));
  var evtHandler =
    run("placeholder", initialModel, view,
      fun(msg, model) { (updt(msg, model), NoCommand) }, subscriptions);
  page
  <html>
    <head>
      <title>Stopwatch</title>
      <link rel="stylesheet" href="css/stopwatch.css" type="text/css" />
    </head>
    <body>
      <div id="placeholder"></div>
    </body>
  </html>
}

fun main() {
  addRoute("/", mainPage);
  addStaticRoute("/css", "css", [("css", "text/css")]);
  servePages()
}

main()
